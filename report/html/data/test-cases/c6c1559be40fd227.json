{"uid":"c6c1559be40fd227","name":"test_collect_delete_tool[正常删除收藏网站]","fullName":"test_case.Collect.test_collect_delete_tool.TestCollectDeleteTool#test_collect_delete_tool","historyId":"7a79f04cd478ab96b4e3403bc5cb9b64","time":{"start":1732457464633,"stop":1732457464816,"duration":183},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"broken","statusMessage":"utils.other_tools.exceptions.ValueNotFoundError: 缓存设置失败，程序中未检测到需要缓存的数据。请求参数: {\"errorCode\":-1001,\"errorMsg\":\"请先登录！\"}提取的 jsonpath 内容: $.data.id","statusTrace":"self = <test_collect_delete_tool.TestCollectDeleteTool object at 0x1038dce50>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 0}}, 'current_request_set_cache': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"删除收藏网站接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_collect_delete_tool(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n>       res = RequestControl(in_data).http_request()\n\ntest_case/Collect/test_collect_delete_tool.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/logging_tool/log_decorator.py:26: in swapper\n    res = func(*args, **kwargs)\nutils/logging_tool/run_time_decorator.py:21: in swapper\n    res = func(*args, **kwargs)\nutils/requests_tool/request_control.py:408: in http_request\n    DependentCase(self.__yaml_case).get_dependent_data()\nutils/requests_tool/dependent_case.py:246: in get_dependent_data\n    _dependent_data = DependentCase(self.__yaml_case).is_dependent()\nutils/requests_tool/dependent_case.py:189: in is_dependent\n    res = RequestControl(re_data).http_request()\nutils/logging_tool/log_decorator.py:26: in swapper\n    res = func(*args, **kwargs)\nutils/logging_tool/run_time_decorator.py:21: in swapper\n    res = func(*args, **kwargs)\nutils/requests_tool/request_control.py:433: in http_request\n    SetCurrentRequestCache(\nutils/requests_tool/set_current_request_cache.py:73: in set_caches_main\n    self.set_response_cache(jsonpath_value=_jsonpath, cache_name=_cache_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requests_tool.set_current_request_cache.SetCurrentRequestCache object at 0x103e55040>, jsonpath_value = '$.data.id', cache_name = 'yushaoqi_sql'\n\n    def set_response_cache(\n            self,\n            jsonpath_value: Text,\n            cache_name\n    ):\n        \"\"\"将响应结果存入缓存\"\"\"\n        _response_data = jsonpath(json.loads(self.response_data), jsonpath_value)\n        if _response_data is not False:\n            CacheHandler.update_cache(cache_name=cache_name, value=_response_data[0])\n            # Cache(cache_name).set_caches(_response_data[0])\n        else:\n>           raise ValueNotFoundError(\"缓存设置失败，程序中未检测到需要缓存的数据。\"\n                                     f\"请求参数: {self.response_data}\"\n                                     f\"提取的 jsonpath 内容: {jsonpath_value}\")\nE           utils.other_tools.exceptions.ValueNotFoundError: 缓存设置失败，程序中未检测到需要缓存的数据。请求参数: {\"errorCode\":-1001,\"errorMsg\":\"请先登录！\"}提取的 jsonpath 内容: $.data.id\n\nutils/requests_tool/set_current_request_cache.py:60: ValueNotFoundError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732457459220,"stop":1732457459233,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"work_login_init","time":{"start":1732457459233,"stop":1732457459521,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"case_skip","time":{"start":1732457464633,"stop":1732457464633,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"broken","statusMessage":"utils.other_tools.exceptions.ValueNotFoundError: 缓存设置失败，程序中未检测到需要缓存的数据。请求参数: {\"errorCode\":-1001,\"errorMsg\":\"请先登录！\"}提取的 jsonpath 内容: $.data.id","statusTrace":"self = <test_collect_delete_tool.TestCollectDeleteTool object at 0x1038dce50>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 0}}, 'current_request_set_cache': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"删除收藏网站接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_collect_delete_tool(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n>       res = RequestControl(in_data).http_request()\n\ntest_case/Collect/test_collect_delete_tool.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/logging_tool/log_decorator.py:26: in swapper\n    res = func(*args, **kwargs)\nutils/logging_tool/run_time_decorator.py:21: in swapper\n    res = func(*args, **kwargs)\nutils/requests_tool/request_control.py:408: in http_request\n    DependentCase(self.__yaml_case).get_dependent_data()\nutils/requests_tool/dependent_case.py:246: in get_dependent_data\n    _dependent_data = DependentCase(self.__yaml_case).is_dependent()\nutils/requests_tool/dependent_case.py:189: in is_dependent\n    res = RequestControl(re_data).http_request()\nutils/logging_tool/log_decorator.py:26: in swapper\n    res = func(*args, **kwargs)\nutils/logging_tool/run_time_decorator.py:21: in swapper\n    res = func(*args, **kwargs)\nutils/requests_tool/request_control.py:433: in http_request\n    SetCurrentRequestCache(\nutils/requests_tool/set_current_request_cache.py:73: in set_caches_main\n    self.set_response_cache(jsonpath_value=_jsonpath, cache_name=_cache_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.requests_tool.set_current_request_cache.SetCurrentRequestCache object at 0x103e55040>, jsonpath_value = '$.data.id', cache_name = 'yushaoqi_sql'\n\n    def set_response_cache(\n            self,\n            jsonpath_value: Text,\n            cache_name\n    ):\n        \"\"\"将响应结果存入缓存\"\"\"\n        _response_data = jsonpath(json.loads(self.response_data), jsonpath_value)\n        if _response_data is not False:\n            CacheHandler.update_cache(cache_name=cache_name, value=_response_data[0])\n            # Cache(cache_name).set_caches(_response_data[0])\n        else:\n>           raise ValueNotFoundError(\"缓存设置失败，程序中未检测到需要缓存的数据。\"\n                                     f\"请求参数: {self.response_data}\"\n                                     f\"提取的 jsonpath 内容: {jsonpath_value}\")\nE           utils.other_tools.exceptions.ValueNotFoundError: 缓存设置失败，程序中未检测到需要缓存的数据。请求参数: {\"errorCode\":-1001,\"errorMsg\":\"请先登录！\"}提取的 jsonpath 内容: $.data.id\n\nutils/requests_tool/set_current_request_cache.py:60: ValueNotFoundError","steps":[{"name":"请求URL: https://www.wanandroid.com/lg/collect/addtool/json","time":{"start":1732457464814,"stop":1732457464814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"请求方式: POST","time":{"start":1732457464814,"stop":1732457464814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"请求头: ","time":{"start":1732457464814,"stop":1732457464815,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bc24ebfd1f36d082","name":"请求头: ","source":"bc24ebfd1f36d082.json","type":"application/json","size":262}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true},{"name":"请求数据: ","time":{"start":1732457464815,"stop":1732457464815,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"ffa9fa5796e3db2a","name":"请求数据: ","source":"ffa9fa5796e3db2a.json","type":"application/json","size":80}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true},{"name":"预期数据: ","time":{"start":1732457464815,"stop":1732457464815,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"41fcd77afd688db9","name":"预期数据: ","source":"41fcd77afd688db9.json","type":"application/json","size":126}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true},{"name":"响应耗时(ms): 152","time":{"start":1732457464815,"stop":1732457464815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"响应结果: ","time":{"start":1732457464815,"stop":1732457464816,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"53a003782e7c8f6d","name":"响应结果: ","source":"53a003782e7c8f6d.json","type":"application/json","size":56}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":4,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"开发平台接口"},{"name":"feature","value":"收藏模块"},{"name":"story","value":"删除收藏网站接口"},{"name":"parentSuite","value":"test_case.Collect"},{"name":"suite","value":"test_collect_delete_tool"},{"name":"subSuite","value":"TestCollectDeleteTool"},{"name":"host","value":"liaoxiaoliaodeMacBook-Air.local"},{"name":"thread","value":"59032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.Collect.test_collect_delete_tool"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'https://www.wanandroid.com/lg/collect/deletetool/json', 'method': 'POST', 'detail': '正常删除收藏网站', 'assert_data': {'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 0, 'AssertType': None}}, 'headers': {'Content-Type': 'multipart/form-data;', 'cookie': '$cache{login_cookie}'}, 'requestType': 'DATA', 'is_run': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'collect_addtool_01', 'dependent_data': [{'dependent_type': 'response', 'jsonpath': '$.data.id', 'set_cache': 'collect_delete_tool_01_id', 'replace_key': None}]}], 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c6c1559be40fd227.json","parameterValues":["{'url': 'https://www.wanandroid.com/lg/collect/deletetool/json', 'method': 'POST', 'detail': '正常删除收藏网站', 'assert_data': {'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 0, 'AssertType': None}}, 'headers': {'Content-Type': 'multipart/form-data;', 'cookie': '$cache{login_cookie}'}, 'requestType': 'DATA', 'is_run': None, 'data': {'id': '$cache{collect_delete_tool_01_id}', 'id2': 2}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'collect_addtool_01', 'dependent_data': [{'dependent_type': 'response', 'jsonpath': '$.data.id', 'set_cache': 'collect_delete_tool_01_id', 'replace_key': None}]}], 'sql': None, 'setup_sql': None, 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': None}"]}