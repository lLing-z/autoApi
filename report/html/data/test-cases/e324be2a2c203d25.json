{"uid":"e324be2a2c203d25","name":"test_collect_tool_list[查看收藏网址列表接口]","fullName":"test_case.Collect.test_collect_tool_list.TestCollectToolList#test_collect_tool_list","historyId":"8dc337090b769ee2123d6c056f9f9f43","time":{"start":1732457460136,"stop":1732457462307,"duration":2171},"description":"\n        :param :\n        :return:\n        ","descriptionHtml":"<pre><code>    :param :\n    :return:\n</code></pre>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_collect_tool_list.TestCollectToolList object at 0x1038e6df0>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 0}, 'status_code': 200}, 'current_request_set_cache': None, 'data': None, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"收藏网址列表接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_collect_tool_list(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case/Collect/test_collect_tool_list.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/assertion/assert_control.py:154: in assert_equality\n    self.assert_type_handle(\nutils/assertion/assert_control.py:122: in assert_type_handle\n    self.functions_mapping[name](resp_data[0], assert_value, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncheck_value = -1001, expect_value = 0, message = ''\n\n    def equals(\n            check_value: Any, expect_value: Any, message: Text = \"\"\n    ):\n        \"\"\"判断是否相等\"\"\"\n    \n>       assert check_value == expect_value, message\nE       AssertionError\n\nutils/assertion/assert_type.py:18: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1732457459220,"stop":1732457459233,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"work_login_init","time":{"start":1732457459233,"stop":1732457459521,"duration":288},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"case_skip","time":{"start":1732457460136,"stop":1732457460136,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n        :param :\n        :return:\n        ","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_collect_tool_list.TestCollectToolList object at 0x1038e6df0>\nin_data = {'assert_data': {'errorCode': {'AssertType': None, 'jsonpath': '$.errorCode', 'type': '==', 'value': 0}, 'status_code': 200}, 'current_request_set_cache': None, 'data': None, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"收藏网址列表接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_collect_tool_list(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl(in_data).http_request()\n        TearDownHandler(res).teardown_handle()\n>       Assert(in_data['assert_data']).assert_equality(response_data=res.response_data,\n                                                       sql_data=res.sql_data, status_code=res.status_code)\n\ntest_case/Collect/test_collect_tool_list.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/assertion/assert_control.py:154: in assert_equality\n    self.assert_type_handle(\nutils/assertion/assert_control.py:122: in assert_type_handle\n    self.functions_mapping[name](resp_data[0], assert_value, message)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncheck_value = -1001, expect_value = 0, message = ''\n\n    def equals(\n            check_value: Any, expect_value: Any, message: Text = \"\"\n    ):\n        \"\"\"判断是否相等\"\"\"\n    \n>       assert check_value == expect_value, message\nE       AssertionError\n\nutils/assertion/assert_type.py:18: AssertionError","steps":[{"name":"请求URL: https://www.wanandroid.com/lg/collect/usertools/json","time":{"start":1732457462303,"stop":1732457462303,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"请求方式: GET","time":{"start":1732457462304,"stop":1732457462304,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"请求头: ","time":{"start":1732457462304,"stop":1732457462304,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"981bd1887526220e","name":"请求头: ","source":"981bd1887526220e.json","type":"application/json","size":225}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true},{"name":"请求数据: ","time":{"start":1732457462305,"stop":1732457462305,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"d1535043aa33a76","name":"请求数据: ","source":"d1535043aa33a76.json","type":"application/json","size":6}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true},{"name":"预期数据: ","time":{"start":1732457462305,"stop":1732457462305,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"fab119102d87cf85","name":"预期数据: ","source":"fab119102d87cf85.json","type":"application/json","size":110}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true},{"name":"响应耗时(ms): 156","time":{"start":1732457462305,"stop":1732457462305,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"响应结果: ","time":{"start":1732457462305,"stop":1732457462306,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b44a08b3c2feb729","name":"响应结果: ","source":"b44a08b3c2feb729.json","type":"application/json","size":56}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":true}],"attachments":[{"uid":"ea8a2d01bc06d209","name":"log","source":"ea8a2d01bc06d209.txt","type":"text/plain","size":883}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"开发平台接口"},{"name":"feature","value":"收藏模块"},{"name":"story","value":"收藏网址列表接口"},{"name":"parentSuite","value":"test_case.Collect"},{"name":"suite","value":"test_collect_tool_list"},{"name":"subSuite","value":"TestCollectToolList"},{"name":"host","value":"liaoxiaoliaodeMacBook-Air.local"},{"name":"thread","value":"59032-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.Collect.test_collect_tool_list"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"in_data","value":"{'url': 'https://www.wanandroid.com/lg/collect/usertools/json', 'method': 'GET', 'detail': '查看收藏网址列表接口', 'assert_data': {'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 0, 'AssertType': None}, 'status_code': 200}, 'headers': {'Content-Type': 'multipart/form-data;', 'cookie': '$cache{login_cookie}'}, 'requestType': 'NONE', 'is_run': None, 'data': None, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.business_type', 'set_cache': 'yushaoqi', 'replace_key': None}]}], 'sql': None, 'setup_sql': ['SELECT * FROM `api_test`.`t_open_field_cfg_copy1` LIMIT 0,1;'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': 2}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e324be2a2c203d25.json","parameterValues":["{'url': 'https://www.wanandroid.com/lg/collect/usertools/json', 'method': 'GET', 'detail': '查看收藏网址列表接口', 'assert_data': {'errorCode': {'jsonpath': '$.errorCode', 'type': '==', 'value': 0, 'AssertType': None}, 'status_code': 200}, 'headers': {'Content-Type': 'multipart/form-data;', 'cookie': '$cache{login_cookie}'}, 'requestType': 'NONE', 'is_run': None, 'data': None, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.business_type', 'set_cache': 'yushaoqi', 'replace_key': None}]}], 'sql': None, 'setup_sql': ['SELECT * FROM `api_test`.`t_open_field_cfg_copy1` LIMIT 0,1;'], 'status_code': None, 'teardown_sql': None, 'teardown': None, 'current_request_set_cache': None, 'sleep': 2}"]}